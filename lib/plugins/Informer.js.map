{"version":3,"sources":["../../src/plugins/Informer.js"],"names":["Plugin","require","module","exports","core","opts","type","id","title","timeoutID","undefined","defaultOptions","typeColors","info","text","bg","warning","error","success","render","bind","showInformer","msg","duration","setState","informer","isHidden","window","clearTimeout","setTimeout","newInformer","getState","hideInformer","state","style","install","on","target","plugin","mount","uninstall","unmount"],"mappings":"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","file":"Informer.js","sourcesContent":["const Plugin = require('./Plugin')\nconst html = require('yo-yo')\n\n/**\n * Informer\n * Shows rad message bubbles\n * used like this: `bus.emit('informer', 'hello world', 'info', 5000)`\n * or for errors: `bus.emit('informer', 'Error uploading img.jpg', 'error', 5000)`\n *\n */\nmodule.exports = class Informer extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'progressindicator'\n    this.id = 'Informer'\n    this.title = 'Informer'\n    this.timeoutID = undefined\n\n    // set default options\n    const defaultOptions = {\n      typeColors: {\n        info: {\n          text: '#fff',\n          bg: '#000'\n        },\n        warning: {\n          text: '#fff',\n          bg: '#F6A623'\n        },\n        error: {\n          text: '#fff',\n          bg: '#e74c3c'\n        },\n        success: {\n          text: '#fff',\n          bg: '#7ac824'\n        }\n      }\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.render = this.render.bind(this)\n  }\n\n  showInformer (msg, type, duration) {\n    this.core.setState({\n      informer: {\n        isHidden: false,\n        type: type,\n        msg: msg\n      }\n    })\n\n    window.clearTimeout(this.timeoutID)\n    if (duration === 0) {\n      this.timeoutID = undefined\n      return\n    }\n\n    // hide the informer after `duration` milliseconds\n    this.timeoutID = setTimeout(() => {\n      const newInformer = Object.assign({}, this.core.getState().informer, {\n        isHidden: true\n      })\n      this.core.setState({\n        informer: newInformer\n      })\n    }, duration)\n  }\n\n  hideInformer () {\n    const newInformer = Object.assign({}, this.core.getState().informer, {\n      isHidden: true\n    })\n    this.core.setState({\n      informer: newInformer\n    })\n  }\n\n  render (state) {\n    const isHidden = state.informer.isHidden\n    const msg = state.informer.msg\n    const type = state.informer.type || 'info'\n    const style = `background-color: ${this.opts.typeColors[type].bg}; color: ${this.opts.typeColors[type].text};`\n\n    // @TODO add aria-live for screen-readers\n    return html`<div class=\"Uppy UppyTheme--default UppyInformer\" style=\"${style}\" aria-hidden=\"${isHidden}\">\n      <p>${msg}</p>\n    </div>`\n  }\n\n  install () {\n    // Set default state for Google Drive\n    this.core.setState({\n      informer: {\n        isHidden: true,\n        type: '',\n        msg: ''\n      }\n    })\n\n    this.core.on('informer', (msg, type, duration) => {\n      this.showInformer(msg, type, duration)\n    })\n\n    this.core.on('informer:hide', () => {\n      this.hideInformer()\n    })\n\n    const target = this.opts.target\n    const plugin = this\n    this.target = this.mount(target, plugin)\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}