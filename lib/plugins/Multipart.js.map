{"version":3,"sources":["../../src/plugins/Multipart.js"],"names":["Plugin","require","module","exports","core","opts","type","id","title","defaultOptions","fieldName","responseUrlFieldName","bundle","handleUpload","bind","upload","file","current","total","log","resolve","reject","formPost","FormData","append","data","Object","keys","meta","forEach","item","xhr","XMLHttpRequest","addEventListener","ev","lengthComputable","emitter","emit","uploader","bytesUploaded","loaded","bytesTotal","target","status","resp","JSON","parse","response","uploadURL","name","open","endpoint","send","on","fileID","abort","selectForUpload","files","length","filesForUpload","progress","uploadStarted","isRemote","push","i","parseInt","getState","bus","once","install","addUploader","uninstall","removeUploader"],"mappings":"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","file":"Multipart.js","sourcesContent":["const Plugin = require('./Plugin')\n\nmodule.exports = class Multipart extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'uploader'\n    this.id = 'Multipart'\n    this.title = 'Multipart'\n\n    // Default options\n    const defaultOptions = {\n      fieldName: 'files[]',\n      responseUrlFieldName: 'url',\n      bundle: true\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.handleUpload = this.handleUpload.bind(this)\n  }\n\n  upload (file, current, total) {\n    this.core.log(`uploading ${current} of ${total}`)\n    return new Promise((resolve, reject) => {\n      // turn file into an array so we can use bundle\n      // if (!this.opts.bundle) {\n      //   files = [files[current]]\n      // }\n\n      // for (let i in files) {\n      //   formPost.append(this.opts.fieldName, files[i])\n      // }\n\n      const formPost = new FormData()\n      formPost.append(this.opts.fieldName, file.data)\n\n      Object.keys(file.meta).forEach((item) => {\n        // console.log(file.meta, file.meta[item])\n        formPost.append(item, file.meta[item])\n      })\n\n      const xhr = new XMLHttpRequest()\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        if (ev.lengthComputable) {\n          this.core.emitter.emit('core:upload-progress', {\n            uploader: this,\n            id: file.id,\n            bytesUploaded: ev.loaded,\n            bytesTotal: ev.total\n          })\n        }\n      })\n\n      xhr.addEventListener('load', (ev) => {\n        if (ev.target.status >= 200 && ev.target.status < 300) {\n          const resp = JSON.parse(xhr.response)\n          const uploadURL = resp[this.opts.responseUrlFieldName]\n\n          this.core.emitter.emit('core:upload-success', file.id, resp, uploadURL)\n\n          if (uploadURL) {\n            this.core.log(`Download ${file.name} from ${file.uploadURL}`)\n          }\n\n          return resolve(file)\n        } else {\n          this.core.emitter.emit('core:upload-error', file.id, xhr)\n          return reject('Upload error')\n        }\n\n        // var upload = {}\n        //\n        // if (this.opts.bundle) {\n        //   upload = {files: files}\n        // } else {\n        //   upload = {file: files[current]}\n        // }\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        this.core.emitter.emit('core:upload-error', file.id)\n        return reject('Upload error')\n      })\n\n      xhr.open('POST', this.opts.endpoint, true)\n      xhr.send(formPost)\n\n      this.core.emitter.on('core:upload-cancel', (fileID) => {\n        if (fileID === file.id) {\n          xhr.abort()\n        }\n      })\n\n      this.core.emitter.on('core:cancel-all', () => {\n        // const files = this.core.getState().files\n        // if (!files[file.id]) return\n        xhr.abort()\n      })\n\n      this.core.emitter.emit('core:upload-started', file.id)\n    })\n  }\n\n  selectForUpload (files) {\n    if (Object.keys(files).length === 0) {\n      this.core.log('no files to upload!')\n      return\n    }\n\n    const filesForUpload = []\n    Object.keys(files).forEach((file) => {\n      if (!files[file].progress.uploadStarted || files[file].isRemote) {\n        filesForUpload.push(files[file])\n      }\n    })\n\n    filesForUpload.forEach((file, i) => {\n      const current = parseInt(i, 10) + 1\n      const total = filesForUpload.length\n      this.upload(file, current, total)\n    })\n\n    //   if (this.opts.bundle) {\n    //     uploaders.push(this.upload(files, 0, files.length))\n    //   } else {\n    //     for (let i in files) {\n    //       uploaders.push(this.upload(files, i, files.length))\n    //     }\n    //   }\n  }\n\n  handleUpload () {\n    this.core.log('Multipart is uploading...')\n    const files = this.core.getState().files\n\n    this.selectForUpload(files)\n\n    return new Promise((resolve) => {\n      this.core.bus.once('core:upload-complete', resolve)\n    })\n  }\n\n  install () {\n    this.core.addUploader(this.handleUpload)\n  }\n\n  uninstall () {\n    this.core.removeUploader(this.handleUpload)\n  }\n}\n"]}