{"version":3,"sources":["../../../src/plugins/GoogleDrive/index.js"],"names":["Plugin","require","Provider","View","module","exports","core","opts","type","id","title","stateId","icon","GoogleDrive","host","provider","authProvider","files","onAuth","bind","render","defaultOptions","install","view","setState","googleDrive","authenticated","folders","directories","activeRow","filterInput","target","plugin","mount","auth","then","catch","handleError","uninstall","unmount","updateState","getFolder","isFolder","item","mimeType","getItemData","size","parseFloat","fileSize","getItemIcon","iconLink","getItemSubList","items","getItemName","getMimeType","getItemId","getItemRequestPath","getItemModifiedDate","modifiedByMeDate","state"],"mappings":";;;;;;;;;;;;;AACA,IAAMA,SAASC,QAAQ,WAAR,CAAf;;AAEA,IAAMC,WAAWD,QAAQ,sCAAR,CAAjB;;AAEA,IAAME,OAAOF,QAAQ,oCAAR,CAAb;;AAEAG,OAAOC,OAAP;AAAA;;AACE,kBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AAAA,iDACvB,mBAAMD,IAAN,EAAYC,IAAZ,CADuB;;AAEvB,UAAKC,IAAL,GAAY,UAAZ;AACA,UAAKC,EAAL,GAAU,aAAV;AACA,UAAKC,KAAL,GAAa,cAAb;AACA,UAAKC,OAAL,GAAe,aAAf;AACA,UAAKC,IAAL,GAAY;AAAA;;AAAA;AAAA,KAAZ;;AAMA;AACA;AACA,UAAKC,WAAL,GAAmB,IAAIX,QAAJ,CAAa;AAC9BY,YAAM,MAAKP,IAAL,CAAUO,IADc;AAE9BC,gBAAU,OAFoB;AAG9BC,oBAAc;AAHgB,KAAb,CAAnB;;AAMA,UAAKC,KAAL,GAAa,EAAb;;AAEA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,OAAd;AACA;AACA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYD,IAAZ,OAAd;;AAEA;AACA,QAAME,iBAAiB,EAAvB;;AAEA;AACA,UAAKd,IAAL,GAAY,SAAc,EAAd,EAAkBc,cAAlB,EAAkCd,IAAlC,CAAZ;AA9BuB;AA+BxB;;AAhCH,mBAkCEe,OAlCF,sBAkCa;AACT,SAAKC,IAAL,GAAY,IAAIpB,IAAJ,CAAS,IAAT,CAAZ;AACA;AACA,SAAKG,IAAL,CAAUkB,QAAV,CAAmB;AACjB;AACA;AACAC,mBAAa;AACXC,uBAAe,KADJ;AAEXT,eAAO,EAFI;AAGXU,iBAAS,EAHE;AAIXC,qBAAa,EAJF;AAKXC,mBAAW,CAAC,CALD;AAMXC,qBAAa;AANF;AAHI,KAAnB;;AAaA,QAAMC,SAAS,KAAKxB,IAAL,CAAUwB,MAAzB;AACA,QAAMC,SAAS,IAAf;AACA,SAAKD,MAAL,GAAc,KAAKE,KAAL,CAAWF,MAAX,EAAmBC,MAAnB,CAAd;;AAEA;AACA,SAAK,KAAKvB,EAAV,EAAcyB,IAAd,GAAqBC,IAArB,CAA0B,KAAKjB,MAA/B,EAAuCkB,KAAvC,CAA6C,KAAKb,IAAL,CAAUc,WAAvD;AACA;AACD,GAzDH;;AAAA,mBA2DEC,SA3DF,wBA2De;AACX,SAAKC,OAAL;AACD,GA7DH;;AAAA,mBA+DErB,MA/DF,mBA+DUQ,aA/DV,EA+DyB;AACrB,SAAKH,IAAL,CAAUiB,WAAV,CAAsB,EAACd,4BAAD,EAAtB;AACA,QAAIA,aAAJ,EAAmB;AACjB,WAAKH,IAAL,CAAUkB,SAAV,CAAoB,MAApB;AACD;AACF,GApEH;;AAAA,mBAsEEC,QAtEF,qBAsEYC,IAtEZ,EAsEkB;AACd,WAAOA,KAAKC,QAAL,KAAkB,oCAAzB;AACD,GAxEH;;AAAA,mBA0EEC,WA1EF,wBA0EeF,IA1Ef,EA0EqB;AACjB,WAAO,SAAc,EAAd,EAAkBA,IAAlB,EAAwB,EAACG,MAAMC,WAAWJ,KAAKK,QAAhB,CAAP,EAAxB,CAAP;AACD,GA5EH;;AAAA,mBA8EEC,WA9EF,wBA8EeN,IA9Ef,EA8EqB;AAAA;;AACjB,sFAAuBA,KAAKO,QAA5B;AACD,GAhFH;;AAAA,mBAkFEC,cAlFF,2BAkFkBR,IAlFlB,EAkFwB;AACpB,WAAOA,KAAKS,KAAZ;AACD,GApFH;;AAAA,mBAsFEC,WAtFF,wBAsFeV,IAtFf,EAsFqB;AACjB,WAAOA,KAAKjC,KAAL,GAAaiC,KAAKjC,KAAlB,GAA0B,GAAjC;AACD,GAxFH;;AAAA,mBA0FE4C,WA1FF,wBA0FeX,IA1Ff,EA0FqB;AACjB,WAAOA,KAAKC,QAAZ;AACD,GA5FH;;AAAA,mBA8FEW,SA9FF,sBA8FaZ,IA9Fb,EA8FmB;AACf,WAAOA,KAAKlC,EAAZ;AACD,GAhGH;;AAAA,mBAkGE+C,kBAlGF,+BAkGsBb,IAlGtB,EAkG4B;AACxB,WAAO,KAAKY,SAAL,CAAeZ,IAAf,CAAP;AACD,GApGH;;AAAA,mBAsGEc,mBAtGF,gCAsGuBd,IAtGvB,EAsG6B;AACzB,WAAOA,KAAKe,gBAAZ;AACD,GAxGH;;AAAA,mBA0GEtC,MA1GF,mBA0GUuC,KA1GV,EA0GiB;AACb,WAAO,KAAKpC,IAAL,CAAUH,MAAV,CAAiBuC,KAAjB,CAAP;AACD,GA5GH;;AAAA;AAAA,EAAsC3D,MAAtC","file":"index.js","sourcesContent":["const html = require('yo-yo')\nconst Plugin = require('../Plugin')\n\nconst Provider = require('../../uppy-base/src/plugins/Provider')\n\nconst View = require('../../generic-provider-views/index')\n\nmodule.exports = class Google extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.type = 'acquirer'\n    this.id = 'GoogleDrive'\n    this.title = 'Google Drive'\n    this.stateId = 'googleDrive'\n    this.icon = () => html`\n      <svg class=\"UppyIcon UppyModalTab-icon\" width=\"28\" height=\"28\" viewBox=\"0 0 16 16\">\n        <path d=\"M2.955 14.93l2.667-4.62H16l-2.667 4.62H2.955zm2.378-4.62l-2.666 4.62L0 10.31l5.19-8.99 2.666 4.62-2.523 4.37zm10.523-.25h-5.333l-5.19-8.99h5.334l5.19 8.99z\"/>\n      </svg>\n    `\n\n    // writing out the key explicitly for readability the key used to store\n    // the provider instance must be equal to this.id.\n    this.GoogleDrive = new Provider({\n      host: this.opts.host,\n      provider: 'drive',\n      authProvider: 'google'\n    })\n\n    this.files = []\n\n    this.onAuth = this.onAuth.bind(this)\n    // Visual\n    this.render = this.render.bind(this)\n\n    // set default options\n    const defaultOptions = {}\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n  }\n\n  install () {\n    this.view = new View(this)\n    // Set default state for Google Drive\n    this.core.setState({\n      // writing out the key explicitly for readability the key used to store\n      // the plugin state must be equal to this.stateId.\n      googleDrive: {\n        authenticated: false,\n        files: [],\n        folders: [],\n        directories: [],\n        activeRow: -1,\n        filterInput: ''\n      }\n    })\n\n    const target = this.opts.target\n    const plugin = this\n    this.target = this.mount(target, plugin)\n\n    // catch error here.\n    this[this.id].auth().then(this.onAuth).catch(this.view.handleError)\n    return\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n\n  onAuth (authenticated) {\n    this.view.updateState({authenticated})\n    if (authenticated) {\n      this.view.getFolder('root')\n    }\n  }\n\n  isFolder (item) {\n    return item.mimeType === 'application/vnd.google-apps.folder'\n  }\n\n  getItemData (item) {\n    return Object.assign({}, item, {size: parseFloat(item.fileSize)})\n  }\n\n  getItemIcon (item) {\n    return html`<img src=${item.iconLink}/>`\n  }\n\n  getItemSubList (item) {\n    return item.items\n  }\n\n  getItemName (item) {\n    return item.title ? item.title : '/'\n  }\n\n  getMimeType (item) {\n    return item.mimeType\n  }\n\n  getItemId (item) {\n    return item.id\n  }\n\n  getItemRequestPath (item) {\n    return this.getItemId(item)\n  }\n\n  getItemModifiedDate (item) {\n    return item.modifiedByMeDate\n  }\n\n  render (state) {\n    return this.view.render(state)\n  }\n}\n"]}