{"version":3,"sources":["../../../src/plugins/Dashboard/FileCard.js"],"names":["getFileTypeIcon","require","checkIcon","module","exports","fileCard","props","file","fileCardFor","files","meta","tempStoreMeta","ev","value","target","name","attributes","renderSelectOptions","options","opts","map","opt","text","renderMetaFields","metaFields","field","type","id","placeholder","done","preview","general","specific","color","icon"],"mappings":";;;;AACA,IAAMA,kBAAkBC,QAAQ,mBAAR,CAAxB;;eACsBA,QAAQ,SAAR,C;IAAdC,S,YAAAA,S;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,OAAOC,OAAP,GAAiB,SAASC,QAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACzC,MAAMC,OAAOD,MAAME,WAAN,GAAoBF,MAAMG,KAAN,CAAYH,MAAME,WAAlB,CAApB,GAAqD,KAAlE;AACA,MAAME,OAAO,EAAb;;AAEA,WAASC,aAAT,CAAwBC,EAAxB,EAA4B;AAC1B,QAAMC,QAAQD,GAAGE,MAAH,CAAUD,KAAxB;AACA,QAAME,OAAOH,GAAGE,MAAH,CAAUE,UAAV,CAAqBD,IAArB,CAA0BF,KAAvC;AACAH,SAAKK,IAAL,IAAaF,KAAb;AACD;;AAED,WAASI,mBAAT,CAA8BC,OAA9B,EAAuC;AACrC,QAAMC,OAAOD,WAAW,EAAxB;AACA,WAAOC,KAAKC,GAAL,CAAS,UAACC,GAAD,EAAS;AAAA;;AACvB,mGAA6BA,IAAIR,KAAjC,gCAA2CQ,IAAIC,IAA/C;AACD,KAFM,CAAP;AAGD;;AAED,WAASC,gBAAT,CAA2BhB,IAA3B,EAAiC;AAC/B,QAAMiB,aAAalB,MAAMkB,UAAN,IAAoB,EAAvC;AACA,WAAOA,WAAWJ,GAAX,CAAe,UAACK,KAAD,EAAW;AAAA;;AAC/B,UAAIA,MAAMC,IAAN,KAAe,QAAnB,EAA6B;AAAA;;AAC3B,4ZAC+CD,MAAMV,IADrD,6HAEkBU,MAAME,EAFxB,4BAEwChB,aAFxC,kOAEmHM,oBAAoBQ,MAAMP,OAA1B,CAFnH;AAID;AACD,gaAC+CO,MAAMV,IADrD,qKAGiBU,MAAME,EAHvB,iIAKkBpB,KAAKG,IAAL,CAAUe,MAAME,EAAhB,KAAuB,EALzC,6EAMwBF,MAAMG,WAAN,IAAqB,EAN7C,+CAOmBjB,aAPnB;AAQD,KAfM,CAAP;AAgBD;;AAED,gIAA8D,CAACL,MAAME,WAArE,yrBAEkGD,KAAKG,IAAL,GAAYH,KAAKG,IAAL,CAAUK,IAAtB,GAA6BR,KAAKQ,IAFpI,oPAIsB;AAAA,WAAMT,MAAMuB,IAAN,CAAWnB,IAAX,EAAiBH,KAAKoB,EAAtB,CAAN;AAAA,GAJtB,mMAMIrB,MAAME,WAAN,2YAGQD,KAAKuB,OAAL,+EACmBvB,KAAKQ,IADxB,8CACsCR,KAAKuB,OAD3C,wJAEkE9B,gBAAgBO,KAAKmB,IAAL,CAAUK,OAA1B,EAAmCxB,KAAKmB,IAAL,CAAUM,QAA7C,EAAuDC,KAFzH,iJAGMjC,gBAAgBO,KAAKmB,IAAL,CAAUK,OAA1B,EAAmCxB,KAAKmB,IAAL,CAAUM,QAA7C,EAAuDE,IAH7D,uCAHR,+5BAaoF3B,KAAKG,IAAL,CAAUK,IAb9F,gDAcyBJ,aAdzB,kKAgBQY,iBAAiBhB,IAAjB,CAhBR,4EAmBE,IAzBN,4XA+BsB;AAAA,WAAMD,MAAMuB,IAAN,CAAWnB,IAAX,EAAiBH,KAAKoB,EAAtB,CAAN;AAAA,GA/BtB,oJA+ByDzB,WA/BzD;AAkCD,CAvED","file":"FileCard.js","sourcesContent":["const html = require('yo-yo')\nconst getFileTypeIcon = require('./getFileTypeIcon')\nconst { checkIcon } = require('./icons')\n\n// function getIconByMime (fileTypeGeneral) {\n//   switch (fileTypeGeneral) {\n//     case 'text':\n//       return iconText()\n//     case 'audio':\n//       return iconAudio()\n//     default:\n//       return iconFile()\n//   }\n// }\n\nmodule.exports = function fileCard (props) {\n  const file = props.fileCardFor ? props.files[props.fileCardFor] : false\n  const meta = {}\n\n  function tempStoreMeta (ev) {\n    const value = ev.target.value\n    const name = ev.target.attributes.name.value\n    meta[name] = value\n  }\n\n  function renderSelectOptions (options) {\n    const opts = options || []\n    return opts.map((opt) => {\n      return html`<option value=\"${opt.value}\">${opt.text}</option>`\n    })\n  }\n\n  function renderMetaFields (file) {\n    const metaFields = props.metaFields || []\n    return metaFields.map((field) => {\n      if (field.type === 'select') {\n        return html`<fieldset class=\"UppyDashboardFileCard-fieldset\">\n          <label class=\"UppyDashboardFileCard-label\">${field.name}</label>\n          <select name=\"${field.id}\" onchange=${tempStoreMeta}><option disabled selected>Please select an option</option>${renderSelectOptions(field.options)}</select>\n          </fieldset>`\n      }\n      return html`<fieldset class=\"UppyDashboardFileCard-fieldset\">\n        <label class=\"UppyDashboardFileCard-label\">${field.name}</label>\n        <input class=\"UppyDashboardFileCard-input\"\n               name=\"${field.id}\"\n               type=\"text\"\n               value=\"${file.meta[field.id] || ''}\"\n               placeholder=\"${field.placeholder || ''}\"\n               onkeyup=${tempStoreMeta} /></fieldset>`\n    })\n  }\n\n  return html`<div class=\"UppyDashboardFileCard\" aria-hidden=\"${!props.fileCardFor}\">\n    <div class=\"UppyDashboardContent-bar\">\n      <h2 class=\"UppyDashboardContent-title\">Editing <span class=\"UppyDashboardContent-titleFile\">${file.meta ? file.meta.name : file.name}</span></h2>\n      <button class=\"UppyDashboardContent-back\" title=\"Finish editing file\"\n              onclick=${() => props.done(meta, file.id)}>Done</button>\n    </div>\n    ${props.fileCardFor\n      ? html`<div class=\"UppyDashboardFileCard-inner\">\n          <div class=\"UppyDashboardFileCard-preview\">\n            ${file.preview\n              ? html`<img alt=\"${file.name}\" src=\"${file.preview}\">`\n              : html`<div class=\"UppyDashboardItem-previewIcon\" style=\"color: ${getFileTypeIcon(file.type.general, file.type.specific).color}\">\n                  ${getFileTypeIcon(file.type.general, file.type.specific).icon}\n                </div>`\n            }\n          </div>\n          <div class=\"UppyDashboardFileCard-info\">\n            <fieldset class=\"UppyDashboardFileCard-fieldset\">\n              <label class=\"UppyDashboardFileCard-label\">Name</label>\n              <input class=\"UppyDashboardFileCard-input\" name=\"name\" type=\"text\" value=\"${file.meta.name}\"\n                     onkeyup=${tempStoreMeta} />\n            </fieldset>\n            ${renderMetaFields(file)}\n          </div>\n        </div>`\n      : null\n    }\n    <div class=\"UppyDashboard-actions\">\n      <button class=\"UppyButton--circular UppyButton--blue UppyDashboardFileCard-done\"\n              type=\"button\"\n              title=\"Finish editing file\"\n              onclick=${() => props.done(meta, file.id)}>${checkIcon()}</button>\n    </div>\n    </div>`\n}\n"]}