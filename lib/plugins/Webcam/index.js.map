{"version":3,"sources":["../../../src/plugins/Webcam/index.js"],"names":["Plugin","require","WebcamProvider","extend","getFileTypeExtension","supportsMediaRecorder","WebcamIcon","CameraScreen","PermissionsScreen","module","exports","core","opts","userMedia","protocol","location","match","type","id","title","icon","defaultOptions","enableFlash","modes","params","swfURL","width","height","dest_width","dest_height","image_format","jpeg_quality","enable_flash","force_flash","flip_horiz","fps","upload_name","constraints","flashNotDetectedText","noInterfaceFoundText","unfreeze_snap","install","bind","updateState","render","start","stop","takeSnapshot","startRecording","stopRecording","webcam","webcamActive","then","stream","cameraReady","catch","err","cameraError","recorder","MediaRecorder","recordingChunks","addEventListener","event","push","data","isRecording","resolve","reject","mimeType","fileExtension","Error","file","source","name","Date","now","Blob","emitter","emit","getAudioTracks","forEach","track","getVideoTracks","streamSrc","video","target","querySelector","image","getImage","tagFile","state","useTheFlash","URL","createObjectURL","onSnapshot","onStartRecording","onStopRecording","onFocus","focus","onStop","supportsRecording","recording","getSWFHTML","src","setTimeout","init","setState","plugin","mount","uninstall","reset","unmount","newState"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../Plugin')\nconst WebcamProvider = require('../../uppy-base/src/plugins/Webcam')\nconst { extend,\n        getFileTypeExtension,\n        supportsMediaRecorder } = require('../../core/Utils')\nconst WebcamIcon = require('./WebcamIcon')\nconst CameraScreen = require('./CameraScreen')\nconst PermissionsScreen = require('./PermissionsScreen')\n\n/**\n * Webcam\n */\nmodule.exports = class Webcam extends Plugin {\n  constructor (core, opts) {\n    super(core, opts)\n    this.userMedia = true\n    this.protocol = location.protocol.match(/https/i) ? 'https' : 'http'\n    this.type = 'acquirer'\n    this.id = 'Webcam'\n    this.title = 'Webcam'\n    this.icon = WebcamIcon\n\n    // set default options\n    const defaultOptions = {\n      enableFlash: true,\n      modes: [\n        'video-audio',\n        'video-only',\n        'audio-only',\n        'picture'\n      ]\n    }\n\n    this.params = {\n      swfURL: 'webcam.swf',\n      width: 400,\n      height: 300,\n      dest_width: 800,         // size of captured image\n      dest_height: 600,        // these default to width/height\n      image_format: 'jpeg',  // image format (may be jpeg or png)\n      jpeg_quality: 90,      // jpeg image quality from 0 (worst) to 100 (best)\n      enable_flash: true,    // enable flash fallback,\n      force_flash: false,    // force flash mode,\n      flip_horiz: false,     // flip image horiz (mirror mode)\n      fps: 30,               // camera frames per second\n      upload_name: 'webcam', // name of file in upload post data\n      constraints: null,     // custom user media constraints,\n      flashNotDetectedText: 'ERROR: No Adobe Flash Player detected.  Webcam.js relies on Flash for browsers that do not support getUserMedia (like yours).',\n      noInterfaceFoundText: 'No supported webcam interface found.',\n      unfreeze_snap: true    // Whether to unfreeze the camera after snap (defaults to true)\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.install = this.install.bind(this)\n    this.updateState = this.updateState.bind(this)\n\n    this.render = this.render.bind(this)\n\n    // Camera controls\n    this.start = this.start.bind(this)\n    this.stop = this.stop.bind(this)\n    this.takeSnapshot = this.takeSnapshot.bind(this)\n    this.startRecording = this.startRecording.bind(this)\n    this.stopRecording = this.stopRecording.bind(this)\n\n    this.webcam = new WebcamProvider(this.opts, this.params)\n    this.webcamActive = false\n  }\n\n  start () {\n    this.webcamActive = true\n\n    this.webcam.start()\n      .then((stream) => {\n        this.stream = stream\n        this.updateState({\n          // videoStream: stream,\n          cameraReady: true\n        })\n      })\n      .catch((err) => {\n        this.updateState({\n          cameraError: err\n        })\n      })\n  }\n\n  startRecording () {\n    // TODO We can check here if any of the mime types listed in the\n    // mimeToExtensions map in Utils.js are supported, and prefer to use one of\n    // those.\n    // Right now we let the browser pick a type that it deems appropriate.\n    this.recorder = new MediaRecorder(this.stream)\n    this.recordingChunks = []\n    this.recorder.addEventListener('dataavailable', (event) => {\n      this.recordingChunks.push(event.data)\n    })\n    this.recorder.start()\n\n    this.updateState({\n      isRecording: true\n    })\n  }\n\n  stopRecording () {\n    return new Promise((resolve, reject) => {\n      this.recorder.addEventListener('stop', () => {\n        this.updateState({\n          isRecording: false\n        })\n\n        const mimeType = this.recordingChunks[0].type\n        const fileExtension = getFileTypeExtension(mimeType)\n\n        if (!fileExtension) {\n          reject(new Error(`Could not upload file: Unsupported media type \"${mimeType}\"`))\n          return\n        }\n\n        const file = {\n          source: this.id,\n          name: `webcam-${Date.now()}.${fileExtension}`,\n          type: mimeType,\n          data: new Blob(this.recordingChunks, { type: mimeType })\n        }\n\n        this.core.emitter.emit('core:file-add', file)\n\n        this.recordingChunks = null\n        this.recorder = null\n\n        resolve()\n      })\n\n      this.recorder.stop()\n    })\n  }\n\n  stop () {\n    this.stream.getAudioTracks().forEach((track) => {\n      track.stop()\n    })\n    this.stream.getVideoTracks().forEach((track) => {\n      track.stop()\n    })\n    this.webcamActive = false\n    this.stream = null\n    this.streamSrc = null\n  }\n\n  takeSnapshot () {\n    const opts = {\n      name: `webcam-${Date.now()}.jpg`,\n      mimeType: 'image/jpeg'\n    }\n\n    const video = this.target.querySelector('.UppyWebcam-video')\n\n    const image = this.webcam.getImage(video, opts)\n\n    const tagFile = {\n      source: this.id,\n      name: opts.name,\n      data: image.data,\n      type: opts.mimeType\n    }\n\n    this.core.emitter.emit('core:file-add', tagFile)\n  }\n\n  render (state) {\n    if (!this.webcamActive) {\n      this.start()\n    }\n\n    if (!state.webcam.cameraReady && !state.webcam.useTheFlash) {\n      return PermissionsScreen(state.webcam)\n    }\n\n    if (!this.streamSrc) {\n      this.streamSrc = this.stream ? URL.createObjectURL(this.stream) : null\n    }\n\n    return CameraScreen(extend(state.webcam, {\n      onSnapshot: this.takeSnapshot,\n      onStartRecording: this.startRecording,\n      onStopRecording: this.stopRecording,\n      onFocus: this.focus,\n      onStop: this.stop,\n      modes: this.opts.modes,\n      supportsRecording: supportsMediaRecorder(),\n      recording: state.webcam.isRecording,\n      getSWFHTML: this.webcam.getSWFHTML,\n      src: this.streamSrc\n    }))\n  }\n\n  focus () {\n    setTimeout(() => {\n      this.core.emitter.emit('informer', 'Smile!', 'warning', 2000)\n    }, 1000)\n  }\n\n  install () {\n    this.webcam.init()\n    this.core.setState({\n      webcam: {\n        cameraReady: false\n      }\n    })\n\n    const target = this.opts.target\n    const plugin = this\n    this.target = this.mount(target, plugin)\n  }\n\n  uninstall () {\n    this.webcam.reset()\n    this.unmount()\n  }\n\n  /**\n   * Little shorthand to update the state with my new state\n   */\n  updateState (newState) {\n    const {state} = this.core\n    const webcam = Object.assign({}, state.webcam, newState)\n\n    this.core.setState({webcam})\n  }\n}\n"]}