{"version":3,"sources":["../../src/plugins/Plugin.js"],"names":["yo","require","findDOMElement","module","exports","core","opts","type","replaceTargetContent","update","bind","mount","focus","install","uninstall","state","el","newEl","render","target","plugin","callerPluginName","id","targetElement","log","innerHTML","appendChild","Target","targetPluginName","targetPlugin","getPlugin","selectorTarget","addTarget","unmount","parentNode","removeChild"],"mappings":";;;;AAAA,IAAMA,KAAKC,QAAQ,OAAR,CAAX;AACA;;eAC2BA,QAAQ,eAAR,C;IAAnBC,c,YAAAA,c;;AAER;;;;;;;;;;;AASAC,OAAOC,OAAP;AAEE,kBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AACvB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,QAAQ,EAApB;AACA,SAAKC,IAAL,GAAY,MAAZ;;AAEA;AACA,SAAKD,IAAL,CAAUE,oBAAV,KAAmC,KAAKF,IAAL,CAAUE,oBAA7C,IAAqE,IAArE;;AAEA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWD,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKE,KAAL,GAAa,KAAKA,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKG,OAAL,GAAe,KAAKA,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKI,SAAL,GAAiB,KAAKA,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAjB;;AAEA;AACD;;AAjBH,mBAmBED,MAnBF,mBAmBUM,KAnBV,EAmBiB;AACb,QAAI,OAAO,KAAKC,EAAZ,KAAmB,WAAvB,EAAoC;AAClC;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,QAAMC,QAAQ,KAAKC,MAAL,CAAYH,KAAZ,CAAd;AACAf,OAAGS,MAAH,CAAU,KAAKO,EAAf,EAAmBC,KAAnB;;AAEA;AACA;AACA;AACA;AACA;AACD,GA9CH;;AAgDE;;;;;;;;;;AAhDF,mBAwDEN,KAxDF,kBAwDSQ,MAxDT,EAwDiBC,MAxDjB,EAwDyB;AACrB,QAAMC,mBAAmBD,OAAOE,EAAhC;;AAEA,QAAMC,gBAAgBrB,eAAeiB,MAAf,CAAtB;;AAEA,QAAII,aAAJ,EAAmB;AACjB,WAAKlB,IAAL,CAAUmB,GAAV,iBAA4BH,gBAA5B;;AAEA;AACA,UAAI,KAAKf,IAAL,CAAUE,oBAAd,EAAoC;AAClCe,sBAAcE,SAAd,GAA0B,EAA1B;AACD;;AAED,WAAKT,EAAL,GAAUI,OAAOF,MAAP,CAAc,KAAKb,IAAL,CAAUU,KAAxB,CAAV;AACAQ,oBAAcG,WAAd,CAA0B,KAAKV,EAA/B;;AAEA,aAAOO,aAAP;AACD,KAZD,MAYO;AACL;AACA;AACA,UAAMI,SAASR,MAAf;AACA,UAAMS,mBAAmB,IAAID,MAAJ,GAAaL,EAAtC;;AAEA,WAAKjB,IAAL,CAAUmB,GAAV,iBAA4BH,gBAA5B,YAAmDO,gBAAnD;;AAEA,UAAMC,eAAe,KAAKxB,IAAL,CAAUyB,SAAV,CAAoBF,gBAApB,CAArB;AACA,UAAMG,iBAAiBF,aAAaG,SAAb,CAAuBZ,MAAvB,CAAvB;;AAEA,aAAOW,cAAP;AACD;AACF,GAtFH;;AAAA,mBAwFEE,OAxFF,sBAwFa;AACT,QAAI,KAAKjB,EAAL,IAAW,KAAKA,EAAL,CAAQkB,UAAvB,EAAmC;AACjC,WAAKlB,EAAL,CAAQkB,UAAR,CAAmBC,WAAnB,CAA+B,KAAKnB,EAApC;AACD;AACF,GA5FH;;AAAA,mBA8FEJ,KA9FF,oBA8FW;AACP;AACD,GAhGH;;AAAA,mBAkGEC,OAlGF,sBAkGa;AACT;AACD,GApGH;;AAAA,mBAsGEC,SAtGF,wBAsGe;AACX;AACD,GAxGH;;AAAA;AAAA","file":"Plugin.js","sourcesContent":["const yo = require('yo-yo')\n// const nanoraf = require('nanoraf')\nconst { findDOMElement } = require('../core/Utils')\n\n/**\n * Boilerplate that all Plugins share - and should not be used\n * directly. It also shows which methods final plugins should implement/override,\n * this deciding on structure.\n *\n * @param {object} main Uppy core object\n * @param {object} object with plugin options\n * @return {array | string} files or success/fail message\n */\nmodule.exports = class Plugin {\n\n  constructor (core, opts) {\n    this.core = core\n    this.opts = opts || {}\n    this.type = 'none'\n\n    // clear everything inside the target selector\n    this.opts.replaceTargetContent === this.opts.replaceTargetContent || true\n\n    this.update = this.update.bind(this)\n    this.mount = this.mount.bind(this)\n    this.focus = this.focus.bind(this)\n    this.install = this.install.bind(this)\n    this.uninstall = this.uninstall.bind(this)\n\n    // this.frame = null\n  }\n\n  update (state) {\n    if (typeof this.el === 'undefined') {\n      return\n    }\n\n    // const prev = {}\n    // if (!this.frame) {\n    //   console.log('creating frame')\n    //   this.frame = nanoraf((state, prev) => {\n    //     console.log('updating!', Date.now())\n    //     const newEl = this.render(state)\n    //     this.el = yo.update(this.el, newEl)\n    //   })\n    // }\n    // console.log('attempting an update...', Date.now())\n    // this.frame(state, prev)\n\n    // this.core.log('update number: ' + this.core.updateNum++)\n\n    const newEl = this.render(state)\n    yo.update(this.el, newEl)\n\n    // optimizes performance?\n    // requestAnimationFrame(() => {\n    //   const newEl = this.render(state)\n    //   yo.update(this.el, newEl)\n    // })\n  }\n\n  /**\n   * Check if supplied `target` is a DOM element or an `object`.\n   * If it’s an object — target is a plugin, and we search `plugins`\n   * for a plugin with same name and return its target.\n   *\n   * @param {String|Object} target\n   *\n   */\n  mount (target, plugin) {\n    const callerPluginName = plugin.id\n\n    const targetElement = findDOMElement(target)\n\n    if (targetElement) {\n      this.core.log(`Installing ${callerPluginName} to a DOM element`)\n\n      // clear everything inside the target container\n      if (this.opts.replaceTargetContent) {\n        targetElement.innerHTML = ''\n      }\n\n      this.el = plugin.render(this.core.state)\n      targetElement.appendChild(this.el)\n\n      return targetElement\n    } else {\n      // TODO: is instantiating the plugin really the way to roll\n      // just to get the plugin name?\n      const Target = target\n      const targetPluginName = new Target().id\n\n      this.core.log(`Installing ${callerPluginName} to ${targetPluginName}`)\n\n      const targetPlugin = this.core.getPlugin(targetPluginName)\n      const selectorTarget = targetPlugin.addTarget(plugin)\n\n      return selectorTarget\n    }\n  }\n\n  unmount () {\n    if (this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el)\n    }\n  }\n\n  focus () {\n    return\n  }\n\n  install () {\n    return\n  }\n\n  uninstall () {\n    return\n  }\n}\n"]}